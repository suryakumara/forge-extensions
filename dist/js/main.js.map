{"version":3,"file":"main.js","mappings":"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","sources":["webpack://forgeextensions/./src/lib/CoordinateConverter.js","webpack://forgeextensions/./src/main.js"],"sourcesContent":["export default class CoordinateConverter {\n  R = 6371000;\n\n  center = {\n    longitude,\n    latitude,\n  };\n\n  static degreeToRadian(degree) {\n    return (degree * Math.PI) / 180;\n  }\n\n  static forgeCoodinateToCartesianCoordinate(position) {\n    return { x: position[0], y: position[1], z: position[2] };\n  }\n\n  static toForgeCoordinate({ x, y }) {\n    return {\n      x: x,\n      y: y,\n    };\n  }\n\n  constructor(latitude, longitude) {\n    this.center = {\n      latitude,\n      longitude,\n    };\n  }\n\n  getCenter() {\n    return this.center;\n  }\n\n  setCenter(latitude, longitude) {\n    this.cente = {\n      latitude,\n      longitude,\n    };\n  }\n\n  /**\n   * @returns distance (meter)\n   */\n\n  distance = (latitude, longitude) => {\n    const R = 6371e3;\n    const φ1 = CoordinateConverter.degreeToRadian(this.center.latitude);\n    const φ2 = CoordinateConverter.degreeToRadian(latitude);\n    const Δφ = CoordinateConverter.degreeToRadian(\n      latitude - this.center.latitude\n    );\n    const Δλ = CoordinateConverter.degreeToRadian(\n      (longitude = this.center.longitude)\n    );\n    const a =\n      Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n      Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = this.R * c;\n    return d;\n  };\n\n  geographicToCartesian = (\n    latitudeCenter,\n    longitudeCenter,\n    latitude,\n    longitude\n  ) => {\n    let distanceX = this.distance(\n      latitudeCenter,\n      longitudeCenter,\n      latitudeCenter,\n      longitude\n    );\n    let distanceY = this.distance(\n      latitudeCenter,\n      longitudeCenter,\n      latitude,\n      longitudeCenter\n    );\n\n    if (longitudeCenter * longitude > 0) {\n      console.log(longitudeCenter * longitude);\n\n      if (longitudeCenter > longitude) {\n        distanceX *= -1;\n      }\n    } else if (\n      longitudeCenter < 0 &&\n      longitude > 0 &&\n      Math.abs(longitudeCenter - longitude) > 180\n    ) {\n      distanceX *= -1;\n    }\n\n    if (latitudeCenter > latitude) {\n      distanceY *= -1;\n    }\n    return { x: distanceX, y: distanceY };\n  };\n\n  cartesianToGeographic = (x, y) => {\n    const pi = Math.PI;\n    const xPos = x / 1000;\n    const yPos = y / 1000;\n    const lat = this.center.latitude + (yPos / this.R) * (180 / pi);\n    const lng =\n      this.center.longitude +\n      ((xPos / this.R) * (180 / pi)) /\n        Math.cos((this.center.latitude * pi) / 180);\n    return {\n      latitude: lat,\n      longitude: lng,\n    };\n  };\n}\n","import CoordinateConverter from \"./lib/CoordinateConverter\";\nimport \"./css/main.css\";\n\n/* global Autodesk THREE mapboxgl GLTFLoader */\n\nclass BeeInventor extends Autodesk.Viewing.Extension {\n  constructor(viewer, options) {\n    super(viewer, options);\n    this.viewer = viewer;\n    this.options = options;\n    this._button = null;\n    this._group = null;\n    this.panel = null;\n    this.grid = null;\n  }\n\n  load() {\n    console.log(\"Docking Panel has been loaded !\");\n    this.grid = new THREE.GridHelper(50, 1);\n    this.grid.material.opacity = 0.8;\n    this.grid.material.transparent = true;\n    this.grid.position.set(0, 0, 0);\n    this.grid.rotateX(Math.PI / 2);\n    if (!this.viewer.overlays.hasScene(\"grid\")) {\n      this.viewer.overlays.addScene(\"grid\");\n    }\n    this.viewer.overlays.addMesh(this.grid, \"grid\");\n    return true;\n  }\n\n  unload() {\n    console.log(\"Docking Panel has been unloaded !\");\n    if (this.viewer.toolbar !== null)\n      this.viewer.toolbar.removeControl(this.subToolbar);\n    if (this.panel !== null) this.panel.setVisible(false);\n    if (this._group) {\n      this._group.removeControl(this._button);\n      if (this._group.getNumberOfControls() === 0) {\n        this.viewer.toolbar.removeControl(this._group);\n      }\n    }\n    return true;\n  }\n\n  onToolbarCreated() {\n    this._group = this.viewer.toolbar.getControl(\"BeeInventorToolbar\");\n    if (!this._group) {\n      this._group = new Autodesk.Viewing.UI.ControlGroup(\"BeeInventorToolbar\");\n      this.viewer.toolbar.addControl(this._group);\n    }\n    this._button = new Autodesk.Viewing.UI.Button(\"Docking Panel\");\n    this._button.onClick = () => {\n      if (this.panel === null) {\n        this.panel = new CustomPanel(\n          this.viewer,\n          this.viewer.container,\n          \"beeInventor\",\n          \"My Custom Extension\"\n        );\n      }\n      // const panel = new CustomPanel();\n      // console.log(panel.map);\n      this.panel.setVisible(!this.panel.isVisible());\n    };\n    this._button.setToolTip(\"BeeInventor IoT\");\n    this._button.addClass(\"dockingPanel\");\n    this._group.addControl(this._button);\n  }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension(\n  \"BeeInventor\",\n  BeeInventor\n);\n\nclass CustomPanel extends Autodesk.Viewing.UI.DockingPanel {\n  constructor(viewer, container, id, title, options) {\n    super(container, id, title, options);\n    this.viewer = viewer;\n    this.options = options;\n    this.container.classList.add(\"docking-panel-container-solid-color-a\");\n    this.container.style.top = \"10px\";\n    this.container.style.left = \"10px\";\n    this.container.style.width = \"500px\";\n    this.container.style.padding = \"10px\";\n    this.container.style.height = \"700px\";\n    this.container.style.resize = \"auto\";\n\n    this.sceneBuilder = null;\n    this.modelBuilder = null;\n    this.input = null;\n    this.inputValueDbId = null;\n    this.inputPosX = null;\n    this.inputPosY = null;\n    this.inputPosZ = null;\n    this.newGeo = null;\n    this.tagId = null;\n\n    // Initial Value\n    this.coordinateConverter = new CoordinateConverter(\n      25.069771049083982,\n      121.52045303099948\n    );\n\n    this.centerLat = 25.069771049083982;\n    this.centerLong = 121.52045303099948;\n    this.angle = 135;\n    this.deviceX = 4;\n    this.deviceY = -5;\n    this.BUILDING_CORNER_LOCATION = [\n      [-4, 5],\n      [-4, -5],\n      [4, -5],\n      [4, 5],\n    ];\n\n    this.iconMapbox = [\n      {\n        url: `${CDN_DOMAIN}/assets/images/png/img_dasloop_pin_online.png`,\n        id: \"worker\",\n        longLat: [121.52045833593478, 25.069785141828287],\n      },\n      {\n        url: `${CDN_DOMAIN}/assets/images/png/img_gps_plant_pin_online.png`,\n        id: \"excavator\",\n        longLat: [121.5203549994178, 25.069866644921674],\n      },\n    ];\n\n    this.positionRestrictedArea_X = -10;\n    this.positionRestrictedArea_Y = 5;\n    this.restricAreaSize_X = 1;\n    this.restricAreaSize_Y = 1;\n    this.restricAreaSize_Z = 1;\n    this.positionExcavator_X = 10;\n    this.positionExcavator_Y = 5;\n    this.valueX = null;\n    this.valueY = null;\n    this.valueZ = null;\n    this.human = null;\n    this.plant = null;\n    this.positionValue = null;\n    this.positionUWB = null;\n    this.datasAPI = null;\n    this.infoDegree = null;\n    this.infoDistance = null;\n    this.infoWorkerPosition = null;\n\n    // modelBuilder for custom Autodesk Forge\n    this.viewer\n      .loadExtension(\"Autodesk.Viewing.SceneBuilder\")\n      .then((builder) => {\n        this.sceneBuilder = builder;\n        return this.sceneBuilder.addNewModel({\n          modelNameOverride: \"Beacon\",\n          conserveMemory: false,\n        });\n      })\n      .then((builder) => {\n        this.modelBuilder = builder;\n        this.loadWorker(this.modelBuilder);\n        console.log(\"modelBuilder Created.\");\n      });\n\n    this.viewer.loadExtension(\"Autodesk.glTF\");\n    this.newModel = new Model(this.viewer, this.options);\n\n    // mapbox\n    this.containerMapbox = document.createElement(\"div\");\n    this.containerMapbox.setAttribute(\"id\", \"map\");\n    this.container.append(this.containerMapbox);\n    mapboxgl.accessToken =\n      \"pk.eyJ1IjoiYmVlaW52ZW50b3IiLCJhIjoiY2p1anFjbTY0MW9hMDRlcDRzMW9tcHJ1OSJ9.9WIfYAKd10XIdwWpB9EZFQ\";\n    this.map = new mapboxgl.Map({\n      container: \"map\",\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [this.centerLong, this.centerLat],\n    });\n    this.map.zoomTo(19.5);\n\n    // Features\n    this.loadPlantModel();\n    this.loadWorkerModel();\n    this.getDataUWB();\n    this.setNewWorker();\n    this.setNewRestrictedArea();\n    this.setNewBeacon();\n    this.setNewPlant();\n    this.setZoomToModel();\n    this.createInput();\n    this.setUpForm();\n    this.setVisibility();\n    this.setMapbox();\n    this.setDrawLine();\n    this.setDasloop();\n    this.lookAtMe();\n    this.setInfoDetails();\n  }\n\n  getDataUWB() {\n    setInterval(() => {\n      fetch(\"http://localhost:8080/mqtt/mockdata\")\n        .then((res) => res.json())\n        .then((res) => {\n          this.workerPosition(res);\n          this.tagId = res.tagId;\n        })\n        .catch((err) => console.log(err));\n    }, 2000);\n  }\n\n  calculateUWBPosition(d, directionDegree, degreeAOA, deviceX, deviceY) {\n    const r = d / 100;\n    const radian = ((-degreeAOA + directionDegree) * Math.PI) / 180;\n    let newX = r * Math.cos(radian);\n    let newY = r * Math.sin(radian);\n    newX += deviceX;\n    newY += deviceY;\n    return [newX, newY];\n  }\n\n  // initial load\n  loadWorker(modelBuilder) {\n    if (modelBuilder) {\n      this.newModel.addWorkerTag(modelBuilder, parseInt(1), 0, 0);\n      this.newModel.addBeacon(\n        modelBuilder,\n        parseInt(123),\n        this.deviceX,\n        this.deviceY\n      );\n\n      this.newModel.addRestrictedArea(\n        modelBuilder,\n        parseInt(776),\n        this.positionRestrictedArea_X,\n        this.positionRestrictedArea_Y\n      );\n      this.newModel.addExcavator(\n        modelBuilder,\n        parseInt(1234),\n        this.positionExcavator_X,\n        this.positionExcavator_Y\n      );\n    }\n  }\n\n  async loadPlantModel() {\n    await this.viewer.loadModel(\n      `${CDN_DOMAIN}/assets/models/excavator.gltf`,\n      {},\n      (plant) => {\n        this.plant = plant;\n      }\n    );\n  }\n\n  async loadWorkerModel() {\n    await this.viewer.loadModel(\n      `${CDN_DOMAIN}/assets/models/human.gltf`,\n      {},\n      (human) => {\n        this.human = human;\n      }\n    );\n  }\n\n  workerPosition(datas) {\n    if (datas) {\n      const position = this.calculateUWBPosition(\n        datas.distance,\n        this.angle,\n        datas.degree,\n        this.deviceX,\n        this.deviceY\n      );\n\n      // mapbox\n      const positionIndoor = this.calculateLatLong(\n        this.centerLat,\n        this.centerLong,\n        position[0],\n        position[1]\n      );\n      // mapbox dasloop\n      this.updateDasloopPosition(positionIndoor);\n\n      const tr = this.plant.getPlacementTransform();\n\n      // const excavator = this.newModel.objects[1234];\n\n      // const initialPosition = new THREE.Vector3();\n      // const positionOfExcavator = initialPosition.setFromMatrixPosition(\n      //   excavator.matrixWorld\n      // );\n      const finalPosition = this.calculateLatLong(\n        this.centerLat,\n        this.centerLong,\n        tr.elements[12],\n        tr.elements[13]\n      );\n      this.updateExcavatorPosition(finalPosition);\n\n      this.setValueDetails(\n        datas.degree,\n        datas.distance,\n        position,\n        positionIndoor[0],\n        positionIndoor[1]\n      );\n\n      this.newModel.changePositionSpecific(\n        this.modelBuilder,\n        parseInt(1),\n        position[0],\n        position[1]\n      );\n\n      if (this.human) {\n        this.human.setPlacementTransform(\n          new THREE.Matrix4().setPosition({\n            x: position[0],\n            y: position[1],\n            z: 0,\n          })\n        );\n      }\n    }\n  }\n\n  multiplyMatrix = (a, b) => {\n    const aNumRows = a.length;\n    const aNumCols = a[0].length;\n    const bNumCols = b[0].length;\n    const m = new Array(aNumRows);\n    for (let r = 0; r < aNumRows; r += 1) {\n      m[r] = new Array(bNumCols);\n      for (let c = 0; c < bNumCols; c += 1) {\n        m[r][c] = 0;\n        for (let i = 0; i < aNumCols; i += 1) {\n          m[r][c] += a[r][i] * b[i][c];\n        }\n      }\n    }\n    return m;\n  };\n  getRotatedPosition = (\n    x,\n    z,\n    boxCenterPositionX,\n    boxCenterPositionZ,\n    angle\n  ) => {\n    let coordinates = [x, z, [1, 1, 1, 1]];\n    const translateToOrigin = [\n      [1, 0, -boxCenterPositionX],\n      [0, 1, -boxCenterPositionZ],\n      [0, 0, 1],\n    ];\n    const radians = angle * (Math.PI / 180);\n    const rotate = [\n      [Math.cos(radians), -Math.sin(radians), 0],\n      [Math.sin(radians), Math.cos(radians), 0],\n      [0, 0, 1],\n    ];\n    const translateToOriginalPos = [\n      [1, 0, boxCenterPositionX],\n      [0, 1, boxCenterPositionZ],\n      [0, 0, 1],\n    ];\n    const toOrigin = this.multiplyMatrix(translateToOriginalPos, rotate);\n    const allTransform = this.multiplyMatrix(toOrigin, translateToOrigin);\n    coordinates = this.multiplyMatrix(allTransform, coordinates);\n    const xCoordinates = coordinates[0];\n    const yCoordinates = coordinates[1];\n    return [xCoordinates, yCoordinates];\n  };\n\n  getBoxPositionEveryCorner(\n    centerLat,\n    centerLong,\n    rest_area_X,\n    rest_area_Y,\n    rest_area_size_X,\n    rest_area_size_Y,\n    angle\n  ) {\n    let newCoordinatesEveryCorner = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n\n    const boxCenterX = rest_area_X;\n    const boxCenterZ = rest_area_Y;\n    const sizeX = rest_area_size_X * 2;\n    const sizeZ = rest_area_size_Y * 2;\n\n    // get position every corner (for rectangle)\n    const pointsX = [\n      boxCenterX - sizeX / 2,\n      boxCenterX - sizeX / 2,\n      boxCenterX + sizeX / 2,\n      boxCenterX + sizeX / 2,\n    ];\n    const pointsZ = [\n      boxCenterZ + sizeZ / 2,\n      boxCenterZ - sizeZ / 2,\n      boxCenterZ - sizeZ / 2,\n      boxCenterZ + sizeZ / 2,\n    ];\n    const positionEveryCorner = this.getRotatedPosition(\n      pointsX,\n      pointsZ,\n      boxCenterX,\n      boxCenterZ,\n      angle\n    );\n\n    newCoordinatesEveryCorner = this.toLatitudeLongitude(\n      centerLat,\n      centerLong,\n      positionEveryCorner\n    );\n\n    return newCoordinatesEveryCorner;\n  }\n\n  setNewWorker() {\n    let buttonCreate = document.createElement(\"div\");\n    buttonCreate.innerText = \"New Create Model\";\n    buttonCreate.classList.add(\"button-bee\");\n    buttonCreate.addEventListener(\"click\", async () => {\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.addNewWorker(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId)\n        );\n      } else {\n        alert(\"Please input a number !\");\n        return false;\n      }\n    });\n    this.container.append(buttonCreate);\n  }\n\n  setNewRestrictedArea() {\n    let buttonCreate = document.createElement(\"div\");\n    buttonCreate.innerText = \"New Restricted Area\";\n    buttonCreate.classList.add(\"button-bee\");\n    buttonCreate.addEventListener(\"click\", async () => {\n      const x = Math.floor(Math.random() * 100);\n      const y = Math.floor(Math.random() * 100);\n      // const x = -10;\n      // const y = 0;\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.addRestrictedArea(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId),\n          x,\n          y\n        );\n      } else {\n        alert(\"Please input a number of dbId!\");\n        return false;\n      }\n    });\n    this.container.append(buttonCreate);\n  }\n\n  setNewBeacon() {\n    let buttonCreate = document.createElement(\"div\");\n    buttonCreate.innerText = \"New Beacon\";\n    buttonCreate.classList.add(\"button-bee\");\n    buttonCreate.addEventListener(\"click\", async () => {\n      const x = Math.floor(Math.random() * 100);\n      const y = Math.floor(Math.random() * 100);\n      // const x = -20;\n      // const y = 0;\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.addBeacon(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId),\n          x,\n          y\n        );\n      } else {\n        alert(\"Please input a number of dbId!\");\n        return false;\n      }\n    });\n    this.container.append(buttonCreate);\n  }\n\n  setNewPlant() {\n    let buttonCreate = document.createElement(\"div\");\n    buttonCreate.innerText = \"New Plant\";\n    buttonCreate.classList.add(\"button-bee\");\n    buttonCreate.addEventListener(\"click\", async () => {\n      const x = Math.floor(Math.random() * 100);\n      const y = Math.floor(Math.random() * 100);\n      // const x = -30;\n      // const y = 0;\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.addExcavator(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId),\n          x,\n          y\n        );\n      } else {\n        alert(\"Please input a number of dbId!\");\n        return false;\n      }\n    });\n    this.container.append(buttonCreate);\n  }\n\n  setZoomToModel() {\n    let buttonZoom = document.createElement(\"div\");\n    buttonZoom.innerText = \"Create Zoom To\";\n    buttonZoom.classList.add(\"button-bee\");\n    buttonZoom.addEventListener(\"click\", () => {\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.setFlyTo(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId)\n        );\n      } else {\n        alert(\"Please input a number of dbId\");\n      }\n    });\n    this.container.append(buttonZoom);\n  }\n\n  createInput() {\n    this.input = document.createElement(\"input\");\n    this.input.setAttribute(\"value\", 1234);\n    this.input.addEventListener(\"input\", (e) => {\n      this.inputValueDbId = e.target.value;\n    });\n    this.container.append(this.input);\n  }\n\n  setVisibility() {\n    let buttonVisibility = document.createElement(\"div\");\n    buttonVisibility.innerText = \"Visibility\";\n    buttonVisibility.classList.add(\"button-bee\");\n    buttonVisibility.addEventListener(\"click\", async () => {\n      this.enabled = !this.enabled;\n      if (this.enabled) {\n        const instanceTree = this.viewer.model.getData().instanceTree;\n        const rootId = instanceTree.getRootId();\n        this.viewer.hide(rootId);\n      } else {\n        const instanceTree = this.viewer.model.getData().instanceTree;\n        const rootId = instanceTree.getRootId();\n        this.viewer.show(rootId);\n      }\n    });\n    this.container.append(buttonVisibility);\n  }\n\n  setUpForm() {\n    const form = document.createElement(\"form\");\n    form.setAttribute(\"id\", \"myform\");\n    const inputPosX = document.createElement(\"input\");\n    const inputPosY = document.createElement(\"input\");\n    const inputPosZ = document.createElement(\"input\");\n    inputPosX.setAttribute(\"name\", \"x\");\n    inputPosY.setAttribute(\"name\", \"y\");\n    inputPosZ.setAttribute(\"name\", \"z\");\n    const submit = document.createElement(\"input\");\n    submit.setAttribute(\"type\", \"submit\");\n    submit.innerText = \"submit_position\";\n    form.append(inputPosX, inputPosY, inputPosZ, submit);\n    form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      this.valueX = parseInt(form.elements.namedItem(\"x\").value);\n      this.valueY = parseInt(form.elements.namedItem(\"y\").value);\n      this.valueZ = parseInt(form.elements.namedItem(\"z\").value);\n\n      if (this.inputValueDbId) {\n        this.newModel.changePositionSpecific(\n          this.modelBuilder,\n          this.inputValueDbId,\n          this.valueX,\n          this.valueY,\n          this.valueZ\n        );\n      }\n    });\n    this.container.append(form);\n  }\n\n  setMapbox() {\n    const latshowvalue = document.createElement(\"input\");\n    const longshowvalue = document.createElement(\"input\");\n    latshowvalue.setAttribute(\"placeholder\", \"Latitude\");\n    longshowvalue.setAttribute(\"placeholder\", \"Longitude\");\n    const containerLatLong = document.createElement(\"div\");\n    containerLatLong.setAttribute(\"class\", \"containerLatLong\");\n    const positionX = document.createElement(\"input\");\n    const positionY = document.createElement(\"input\");\n    const positionZ = document.createElement(\"input\");\n    positionX.setAttribute(\"placeholder\", \"x\");\n    positionY.setAttribute(\"placeholder\", \"y\");\n    positionZ.setAttribute(\"placeholder\", \"z\");\n    containerLatLong.append(\n      latshowvalue,\n      longshowvalue,\n      positionX,\n      positionY,\n      positionZ\n    );\n\n    this.container.append(containerLatLong);\n\n    this.map.on(\"click\", (e) => {\n      const longitudeByClick = e.lngLat.lng;\n      const latitudeByClick = e.lngLat.lat;\n\n      latshowvalue.value = latitudeByClick;\n      longshowvalue.value = longitudeByClick;\n\n      const pos = this.coordinateConverter.geographicToCartesian(\n        latitudeByClick,\n        longitudeByClick\n      );\n\n      positionX.value = pos.x;\n      positionY.value = pos.y;\n\n      if (this.plant) {\n        this.plant.setPlacementTransform(\n          new THREE.Matrix4().setPosition({\n            x: pos.x,\n            y: pos.y,\n            z: 0,\n          })\n        );\n      }\n\n      // this.newModel.changePositionSpecific(\n      //   this.modelBuilder,\n      //   parseInt(1234),\n      //   pos.x,\n      //   pos.y\n      // );\n    });\n  }\n  toLatitudeLongitude(centerLat, centerLong, positionEveryCorner) {\n    const newCoordinatesAfterRotate = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n\n    for (let i = 0; i < positionEveryCorner[0].length; i += 1) {\n      newCoordinatesAfterRotate[i] = this.calculateLatLong(\n        centerLat,\n        centerLong,\n        positionEveryCorner[0][i],\n        positionEveryCorner[1][i]\n      );\n    }\n    return newCoordinatesAfterRotate;\n  }\n\n  calculateLatLong = (lat, long, x, y) => {\n    const rEarth = 6378;\n    const pi = Math.PI;\n    const xPos = x / 1000;\n    const yPos = y / 1000;\n\n    const newLat = lat + (yPos / rEarth) * (180 / pi);\n    const newLong =\n      long + ((xPos / rEarth) * (180 / pi)) / Math.cos((lat * pi) / 180);\n    return [newLong, newLat];\n  };\n\n  setCoordinateBuilding = () => {\n    const newCoordinatesAfterRotate = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n    for (let i = 0; i < this.BUILDING_CORNER_LOCATION.length; i += 1) {\n      newCoordinatesAfterRotate[i] = this.calculateLatLong(\n        this.centerLat,\n        this.centerLong,\n        this.BUILDING_CORNER_LOCATION[i][0],\n        this.BUILDING_CORNER_LOCATION[i][1]\n      );\n    }\n\n    return newCoordinatesAfterRotate;\n  };\n\n  setInfoDetails() {\n    const info = document.createElement(\"div\");\n    this.infoDegree = document.createElement(\"input\");\n    this.infoDistance = document.createElement(\"input\");\n    this.infoWorkerPosition = document.createElement(\"input\");\n    this.long = document.createElement(\"input\");\n    this.lat = document.createElement(\"input\");\n    info.append(\n      this.infoDegree,\n      this.infoDistance,\n      this.infoWorkerPosition,\n      this.long,\n      this.lat\n    );\n    this.container.append(info);\n  }\n\n  setValueDetails(degree, distance, workerposition, long, lat) {\n    this.infoDegree.value = parseFloat(degree).toFixed(2);\n    this.infoDistance.value = distance;\n    this.infoWorkerPosition.value = `(${parseFloat(workerposition[0]).toFixed(\n      2\n    )}, ${parseFloat(workerposition[1]).toFixed(2)})`;\n    this.long.value = long;\n    this.lat.value = lat;\n  }\n\n  setDasloop() {\n    this.map.on(\"load\", () => {\n      // Load an image from an external URL.\n      Promise.all(\n        this.iconMapbox.map(\n          (img) =>\n            new Promise((resolve, reject) => {\n              this.map.loadImage(img.url, (error, res) => {\n                if (error) {\n                  console.log(`Error with ${img.id}`);\n                  console.error(error);\n                  reject(error);\n                } else {\n                  resolve([img, res]);\n                }\n              });\n            })\n        )\n      ).then((icons) => {\n        icons.forEach((icon_data) => {\n          const icon = icon_data[0];\n          const data = icon_data[1];\n\n          if (data) this.map.addImage(icon.id, data);\n\n          this.map.addSource(icon.id, {\n            type: \"geojson\",\n            data: {\n              type: \"FeatureCollection\",\n              features: [\n                {\n                  type: \"Feature\",\n                  geometry: {\n                    type: \"Point\",\n                    coordinates: [icon.longLat[0], icon.longLat[1]],\n                  },\n                  properties: {},\n                },\n              ],\n            },\n          });\n\n          // Add a layer to use the image to represent the data.\n          this.map.addLayer({\n            id: icon.id,\n            type: \"symbol\",\n            source: icon.id, // reference the data source\n            layout: {\n              \"icon-image\": icon.id, // reference the image\n              \"icon-size\": 0.1,\n              \"icon-offset\": [0, -150],\n              \"icon-allow-overlap\": true,\n            },\n          });\n        });\n      });\n    });\n  }\n\n  updateDasloopPosition(dasloopLatLong) {\n    if (dasloopLatLong) {\n      const data = {\n        type: \"FeatureCollection\",\n        features: [\n          {\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: [dasloopLatLong[0], dasloopLatLong[1]],\n            },\n            properties: {},\n          },\n        ],\n      };\n\n      const source = this.map.getSource(\"worker\");\n      if (source) {\n        source.setData(data);\n      }\n    }\n  }\n\n  updateExcavatorPosition(excavatorLatLong) {\n    if (excavatorLatLong) {\n      const excavatorData = {\n        type: \"FeatureCollection\",\n        features: [\n          {\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: [excavatorLatLong[0], excavatorLatLong[1]],\n            },\n            properties: {},\n          },\n        ],\n      };\n\n      const sourceExcavator = this.map.getSource(\"excavator\");\n      if (sourceExcavator) {\n        sourceExcavator.setData(excavatorData);\n      }\n    }\n  }\n\n  // draw line\n  setDrawLine() {\n    this.map.on(\"load\", () => {\n      const newCoordinates = this.setCoordinateBuilding();\n      this.map.addSource(\"route\", {\n        type: \"geojson\",\n        data: {\n          type: \"Feature\",\n          properties: {},\n          geometry: {\n            type: \"LineString\",\n            coordinates: [\n              ...newCoordinates.map((coord) => {\n                return coord;\n              }),\n              newCoordinates[0],\n            ],\n          },\n        },\n      });\n      this.map.addLayer({\n        id: \"route\",\n        type: \"line\",\n        source: \"route\",\n        layout: {\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\",\n        },\n        paint: {\n          \"line-color\": \"#ff0000\",\n          \"line-width\": 4,\n        },\n      });\n\n      const restrictedAreaLine = this.getBoxPositionEveryCorner(\n        this.centerLat,\n        this.centerLong,\n        this.positionRestrictedArea_X,\n        this.positionRestrictedArea_Y,\n        this.restricAreaSize_X,\n        this.restricAreaSize_Y,\n        0\n      );\n      this.map.addSource(\"route2\", {\n        type: \"geojson\",\n        data: {\n          type: \"Feature\",\n          properties: {},\n          geometry: {\n            type: \"LineString\",\n            coordinates: [\n              ...restrictedAreaLine.map((coord) => {\n                return coord;\n              }),\n              restrictedAreaLine[0],\n            ],\n          },\n        },\n      });\n      this.map.addLayer({\n        id: \"route2\",\n        type: \"line\",\n        source: \"route2\",\n        layout: {\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\",\n        },\n        paint: {\n          \"line-color\": \"#ff0000\",\n          \"line-width\": 4,\n        },\n      });\n    });\n  }\n\n  lookAtMe() {\n    let buttonLook = document.createElement(\"div\");\n    buttonLook.classList.add(\"button-bee\");\n    buttonLook.innerText = \"Change Scale\";\n    buttonLook.addEventListener(\"click\", () => {\n      this.newModel.restrictedAreaScale(\n        parseInt(776),\n        this.modelBuilder,\n        this.restricAreaSize_X,\n        this.restricAreaSize_Y\n      );\n    });\n    this.container.append(buttonLook);\n  }\n\n  toForgeCoordinate({ x, y }) {\n    return {\n      x: x,\n      y: y,\n    };\n  }\n\n  distance = (lat1, long1, lat2, long2) => {\n    const R = 6371e3;\n    const φ1 = (lat1 * Math.PI) / 180;\n    const φ2 = (lat2 * Math.PI) / 180;\n    const Δφ = ((lat2 - lat1) * Math.PI) / 180;\n    const Δλ = ((long2 - long1) * Math.PI) / 180;\n    const a =\n      Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n      Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c;\n    return d;\n  };\n}\n\nclass Model {\n  constructor(viewer, options) {\n    this.viewer = viewer;\n    this.options = options;\n    this.position = null;\n    this.workerId = null;\n    this.workerTagId = null;\n    this.model = null;\n    this.humanModel = null;\n    this.restrictedArea = null;\n    this.beacon = null;\n    this.excavator = null;\n    this.objects = {};\n  }\n\n  addWorker(modelBuilder, dbId, x = 0, y = 0, z = 3) {\n    let modelGeometry = new THREE.Geometry();\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const texture = THREE.ImageUtils.loadTexture(\n      `${CDN_DOMAIN}/assets/images/png/img_gps_dasloop_online.png`\n    );\n    texture.minFilter = THREE.LinearFilter;\n    const workerMaterial = new THREE.MeshBasicMaterial({\n      map: texture,\n      side: THREE.DoubleSide,\n    });\n    const planeGeometry = new THREE.PlaneGeometry(1, 1);\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n    textGeometry.computeBoundingBox();\n\n    const workerIdMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    const workerMesh = new THREE.Mesh(planeGeometry, workerMaterial);\n\n    // Setup Human Position\n    workerIdMesh.matrix.setPosition(new THREE.Vector3(-1.5, 0.7, 0));\n    workerIdMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n\n    // Merging\n    modelGeometry.merge(workerMesh.geometry, workerMesh.matrix);\n    modelGeometry.merge(workerIdMesh.geometry, workerIdMesh.matrix);\n    modelGeometry.computeVertexNormals();\n    const workerBufferGeometry = new THREE.BufferGeometry().fromGeometry(\n      modelGeometry\n    );\n    this.humanModel = new THREE.Mesh(workerBufferGeometry, workerMaterial);\n    this.humanModel.matrix.setPosition(new THREE.Vector3(x, y, z));\n\n    // Add to object userData\n    this.humanModel.userData.id = dbId;\n    this.objects[this.humanModel.userData.id] = this.humanModel;\n    this.humanModel.dbId = dbId;\n    modelBuilder.addMesh(this.humanModel);\n  }\n\n  addWorkerTag(modelBuilder, dbId, x = 0, y = 0, z = 1) {\n    let modelGeometry = new THREE.Geometry();\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const sphere = new THREE.SphereGeometry(0.4, 32, 16);\n    const textGeometry = new THREE.TextGeometry(`worker:${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n\n    const workerTagMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    workerTagMesh.matrix.setPosition(new THREE.Vector3(0, 0, 1.3));\n    workerTagMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    const sphereMesh = new THREE.Mesh(sphere, globalMaterial);\n\n    sphereMesh.matrix.setPosition(new THREE.Vector3(0, 0, 1));\n    sphereMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    modelGeometry.merge(sphereMesh.geometry, sphereMesh.matrix);\n    modelGeometry.merge(workerTagMesh.geometry, workerTagMesh.matrix);\n    modelGeometry.computeVertexNormals();\n    const workerTagBuffer = new THREE.BufferGeometry().fromGeometry(\n      modelGeometry\n    );\n    this.workerTagId = new THREE.Mesh(workerTagBuffer, globalMaterial);\n    this.workerTagId.matrix.setPosition(new THREE.Vector3(x, y, z));\n    this.workerTagId.userData.id = dbId;\n    this.objects[this.workerTagId.userData.id] = this.workerTagId;\n    this.workerTagId.dbId = dbId;\n    modelBuilder.addMesh(this.workerTagId);\n  }\n\n  addNewWorker(modelBuilder, dbId, x = 0, y = 0, z = 1) {\n    let modelGeometry = new THREE.Geometry();\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const head = new THREE.SphereGeometry(0.4, 32, 16);\n    const body = new THREE.SphereGeometry(0.3, 32, 16);\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n\n    const humanIdMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    humanIdMesh.matrix.setPosition(new THREE.Vector3(0, 0, 1.3));\n    humanIdMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    const headMesh = new THREE.Mesh(head, globalMaterial);\n    const bodyMesh = new THREE.Mesh(body, globalMaterial);\n\n    headMesh.matrix.setPosition(new THREE.Vector3(0, 0, 1));\n\n    headMesh.matrix.scale(new THREE.Vector3(0.5, 0.5, 0.5));\n    bodyMesh.matrix.scale(new THREE.Vector3(0.5, 0.5, 2.5));\n    modelGeometry.merge(headMesh.geometry, headMesh.matrix);\n    modelGeometry.merge(bodyMesh.geometry, bodyMesh.matrix);\n    modelGeometry.merge(humanIdMesh.geometry, humanIdMesh.matrix);\n    modelGeometry.computeVertexNormals();\n    const humanModel = new THREE.BufferGeometry().fromGeometry(modelGeometry);\n    this.humanModel = new THREE.Mesh(humanModel, globalMaterial);\n    this.humanModel.matrix.setPosition(new THREE.Vector3(x, y, z));\n    this.humanModel.userData.id = dbId;\n    this.objects[this.humanModel.userData.id] = this.humanModel;\n    this.humanModel.dbId = dbId;\n    modelBuilder.addMesh(this.humanModel);\n    this.model = this.modelBuilder;\n  }\n\n  addRestrictedArea(modelBuilder, dbId, x = 0, y = 0, z = 2) {\n    const box = new THREE.BoxGeometry(1, 1, 1);\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n\n    let restricted = new THREE.Geometry();\n    const boxMesh = new THREE.Mesh(box, globalMaterial);\n    const textMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    textMesh.matrix.setPosition(new THREE.Vector3(0, 0.5, 0));\n    textMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    boxMesh.matrix.scale(new THREE.Vector3(1, 1, 1));\n\n    restricted.merge(boxMesh.geometry, boxMesh.matrix);\n    restricted.merge(textMesh.geometry, textMesh.matrix);\n    restricted.computeVertexNormals();\n    const restrictedGeo = new THREE.BufferGeometry().fromGeometry(restricted);\n    this.restrictedArea = new THREE.Mesh(restrictedGeo, globalMaterial);\n\n    this.restrictedArea.matrix.setPosition(new THREE.Vector3(x, y, z));\n    // Add to object userData\n    this.restrictedArea.userData.id = dbId;\n    this.objects[this.restrictedArea.userData.id] = this.restrictedArea;\n    this.restrictedArea.dbId = dbId;\n    modelBuilder.addMesh(this.restrictedArea);\n  }\n\n  addExcavator(modelBuilder, dbId, x = 0, y = 0, z = 1) {\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: \"#ff9500\" });\n    const texture = THREE.ImageUtils.loadTexture(\n      `${CDN_DOMAIN}/assets/images/png/img_gps_plant_online-3.png`\n    );\n    texture.minFilter = THREE.LinearFilter;\n    const excavatorMaterial = new THREE.MeshBasicMaterial({\n      map: texture,\n      side: THREE.DoubleSide,\n    });\n    const boxGeometry = new THREE.BoxGeometry(1, 1, 1);\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n    textGeometry.computeBoundingBox();\n\n    const textMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    const excavatorMesh = new THREE.Mesh(boxGeometry, globalMaterial);\n    excavatorMesh.matrix.scale(new THREE.Vector3(2, 2, 1));\n    textMesh.matrix.setPosition(new THREE.Vector3(0, 1, 0));\n    textMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    let excavatorGeo = new THREE.Geometry();\n\n    excavatorGeo.merge(textMesh.geometry, textMesh.matrix);\n    excavatorGeo.merge(excavatorMesh.geometry, excavatorMesh.matrix);\n    excavatorGeo.computeVertexNormals();\n\n    const excavatorBuffer = new THREE.BufferGeometry().fromGeometry(\n      excavatorGeo\n    );\n    this.excavator = new THREE.Mesh(excavatorBuffer, excavatorMaterial);\n\n    this.excavator.matrix.setPosition(new THREE.Vector3(x, y, z));\n\n    // Add to object userData\n    this.excavator.userData.id = dbId;\n    this.objects[this.excavator.userData.id] = this.excavator;\n\n    this.excavator.dbId = dbId;\n    modelBuilder.addMesh(this.excavator);\n  }\n\n  addBeacon(modelBuilder, dbId, x = 0, y = 0, z = 1) {\n    const sphere = new THREE.SphereGeometry(0.3, 32, 16);\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n    const textMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    const beaconMesh = new THREE.Mesh(sphere, globalMaterial);\n    // Setup Human Position\n    textMesh.matrix.setPosition(new THREE.Vector3(0, 0.5, 0));\n    textMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    let beaconGeo = new THREE.Geometry();\n    beaconGeo.merge(textMesh.geometry, textMesh.matrix);\n    beaconGeo.merge(beaconMesh.geometry, beaconMesh.matrix);\n    beaconGeo.computeVertexNormals();\n\n    const beaconBuffer = new THREE.BufferGeometry().fromGeometry(beaconGeo);\n    this.beacon = new THREE.Mesh(beaconBuffer, globalMaterial);\n    this.beacon.matrix.setPosition(new THREE.Vector3(x, y, z));\n\n    // Add to object userData\n    this.beacon.userData.id = dbId;\n    this.objects[this.beacon.userData.id] = this.beacon;\n\n    this.beacon.dbId = dbId;\n    modelBuilder.addMesh(this.beacon);\n  }\n\n  setFlyTo(modelBuilder, dbId) {\n    this.viewer.select([dbId], modelBuilder.model);\n    this.viewer.utilities.fitToView();\n  }\n\n  changePosition(modelBuilder, mesh, x, y, z) {\n    console.log(mesh);\n    mesh.matrix.setPosition(new THREE.Vector3(x, y, z));\n    modelBuilder.updateMesh(mesh);\n  }\n\n  changePositionSpecific(modelBuilder, dbId, x = 0, y = 0, z = 1) {\n    if (this.objects[dbId]) {\n      this.objects[dbId].matrix.setPosition(new THREE.Vector3(x, y, z));\n      modelBuilder.updateMesh(this.objects[dbId]);\n    } else {\n      console.log(\"there is no object on this scene !\");\n    }\n  }\n\n  restrictedAreaScale(dbId, modelBuilder, size_X, size_Y) {\n    if (this.objects[dbId]) {\n      this.objects[dbId].matrix.scale(new THREE.Vector3(size_X, size_Y, 1));\n      modelBuilder.updateMesh(this.objects[dbId]);\n      // const position = new THREE.Vector3();\n      // const scale = position.setFromMatrixScale(this.objects[dbId].matrixWorld);\n    } else {\n      console.log(\"there is no object on this scene !\");\n    }\n  }\n\n  lookAtMe(modelBuilder, dbId) {\n    console.log(modelBuilder);\n    this.objects[dbId].matrix.makeRotationFromQuaternion(\n      this.viewer.getCamera().clone().quaternion\n    );\n    modelBuilder.updateMesh(this.objects[dbId]);\n  }\n}\n"],"names":["CoordinateConverter","latitude","longitude","φ1","degreeToRadian","center","φ2","Δφ","Δλ","a","Math","sin","cos","c","atan2","sqrt","R","latitudeCenter","longitudeCenter","distanceX","distance","distanceY","console","log","abs","x","y","pi","PI","xPos","yPos","this","degree","position","z","cente","BeeInventor","Autodesk","Viewing","Extension","viewer","options","_button","_group","panel","grid","THREE","GridHelper","material","opacity","transparent","set","rotateX","overlays","hasScene","addScene","addMesh","toolbar","removeControl","subToolbar","setVisible","getNumberOfControls","getControl","UI","ControlGroup","addControl","Button","onClick","CustomPanel","container","isVisible","setToolTip","addClass","theExtensionManager","registerExtension","DockingPanel","id","title","b","aNumRows","length","aNumCols","bNumCols","m","Array","r","i","boxCenterPositionX","boxCenterPositionZ","angle","coordinates","translateToOrigin","radians","rotate","translateToOriginalPos","toOrigin","multiplyMatrix","allTransform","lat","long","newLat","newCoordinatesAfterRotate","BUILDING_CORNER_LOCATION","calculateLatLong","centerLat","centerLong","lat1","long1","lat2","long2","classList","add","style","top","left","width","padding","height","resize","sceneBuilder","modelBuilder","input","inputValueDbId","inputPosX","inputPosY","inputPosZ","newGeo","tagId","coordinateConverter","deviceX","deviceY","iconMapbox","url","CDN_DOMAIN","longLat","positionRestrictedArea_X","positionRestrictedArea_Y","restricAreaSize_X","restricAreaSize_Y","restricAreaSize_Z","positionExcavator_X","positionExcavator_Y","valueX","valueY","valueZ","human","plant","positionValue","positionUWB","datasAPI","infoDegree","infoDistance","infoWorkerPosition","loadExtension","then","builder","addNewModel","modelNameOverride","conserveMemory","loadWorker","newModel","Model","containerMapbox","document","createElement","setAttribute","append","mapboxgl","accessToken","map","Map","zoomTo","loadPlantModel","loadWorkerModel","getDataUWB","setNewWorker","setNewRestrictedArea","setNewBeacon","setNewPlant","setZoomToModel","createInput","setUpForm","setVisibility","setMapbox","setDrawLine","setDasloop","lookAtMe","setInfoDetails","setInterval","fetch","res","json","workerPosition","err","d","directionDegree","degreeAOA","radian","newX","newY","addWorkerTag","parseInt","addBeacon","addRestrictedArea","addExcavator","loadModel","datas","calculateUWBPosition","positionIndoor","updateDasloopPosition","tr","getPlacementTransform","finalPosition","elements","updateExcavatorPosition","setValueDetails","changePositionSpecific","setPlacementTransform","Matrix4","setPosition","rest_area_X","rest_area_Y","rest_area_size_X","rest_area_size_Y","boxCenterX","boxCenterZ","sizeX","sizeZ","pointsX","pointsZ","positionEveryCorner","getRotatedPosition","toLatitudeLongitude","buttonCreate","innerText","addEventListener","isNaN","addNewWorker","alert","floor","random","buttonZoom","setFlyTo","e","target","value","buttonVisibility","enabled","instanceTree","model","getData","rootId","getRootId","hide","show","form","submit","preventDefault","namedItem","latshowvalue","longshowvalue","containerLatLong","positionX","positionY","positionZ","on","longitudeByClick","lngLat","lng","latitudeByClick","pos","geographicToCartesian","info","workerposition","parseFloat","toFixed","Promise","all","img","resolve","reject","loadImage","error","icons","forEach","icon_data","icon","data","addImage","addSource","type","features","geometry","properties","addLayer","source","layout","dasloopLatLong","getSource","setData","excavatorLatLong","excavatorData","sourceExcavator","newCoordinates","setCoordinateBuilding","coord","paint","restrictedAreaLine","getBoxPositionEveryCorner","buttonLook","restrictedAreaScale","workerId","workerTagId","humanModel","restrictedArea","beacon","excavator","objects","dbId","modelGeometry","Geometry","globalMaterial","MeshBasicMaterial","color","texture","ImageUtils","loadTexture","minFilter","LinearFilter","workerMaterial","side","DoubleSide","planeGeometry","PlaneGeometry","textGeometry","TextGeometry","font","size","curveSegments","computeBoundingBox","workerIdMesh","Mesh","workerMesh","matrix","Vector3","scale","merge","computeVertexNormals","workerBufferGeometry","BufferGeometry","fromGeometry","userData","sphere","SphereGeometry","workerTagMesh","sphereMesh","workerTagBuffer","head","body","humanIdMesh","headMesh","bodyMesh","box","BoxGeometry","restricted","boxMesh","textMesh","restrictedGeo","excavatorMaterial","boxGeometry","excavatorMesh","excavatorGeo","excavatorBuffer","beaconMesh","beaconGeo","beaconBuffer","select","utilities","fitToView","mesh","updateMesh","size_X","size_Y","makeRotationFromQuaternion","getCamera","clone","quaternion"],"sourceRoot":""}