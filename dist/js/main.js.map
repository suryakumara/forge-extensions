{"version":3,"file":"main.js","mappings":"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","sources":["webpack://forgeextensions/./src/lib/CoordinateConverter.js","webpack://forgeextensions/./src/main.js"],"sourcesContent":["export const distance = (lat1, long1, lat2, long2) => {\n  const R = 6371e3;\n  const φ1 = (lat1 * Math.PI) / 180;\n  const φ2 = (lat2 * Math.PI) / 180;\n  const Δφ = ((lat2 - lat1) * Math.PI) / 180;\n  const Δλ = ((long2 - long1) * Math.PI) / 180;\n  const a =\n    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c;\n  return d;\n};\n\nfunction toForgeCoordinate({ x, y }) {\n  return {\n    x: x,\n    y: y,\n  };\n}\n\nexport const geographicToCartesian = (\n  latitudeCenter,\n  longitudeCenter,\n  latitude,\n  longitude\n) => {\n  let distanceX = distance(\n    latitudeCenter,\n    longitudeCenter,\n    latitudeCenter,\n    longitude\n  );\n  let distanceY = distance(\n    latitudeCenter,\n    longitudeCenter,\n    latitude,\n    longitudeCenter\n  );\n\n  if (longitudeCenter * longitude > 0) {\n    console.log(longitudeCenter * longitude);\n\n    if (longitudeCenter > longitude) {\n      distanceX *= -1;\n    }\n  } else if (\n    longitudeCenter < 0 &&\n    longitude > 0 &&\n    Math.abs(longitudeCenter - longitude) > 180\n  ) {\n    distanceX *= -1;\n  }\n\n  if (latitudeCenter > latitude) {\n    distanceY *= -1;\n  }\n  return toForgeCoordinate({ x: distanceX, y: distanceY });\n};\n","import { distance } from \"./lib/CoordinateConverter\";\nimport './css/main.css';\n\n/* global Autodesk THREE mapboxgl GLTFLoader */\n\nclass BeeInventor extends Autodesk.Viewing.Extension {\n  constructor(viewer, options) {\n    super(viewer, options);\n    this.viewer = viewer;\n    this.options = options;\n    this._button = null;\n    this._group = null;\n    this.panel = null;\n    this.grid = null;\n  }\n\n  load() {\n    console.log(\"Docking Panel has been loaded !\");\n    this.grid = new THREE.GridHelper(50, 1);\n    this.grid.material.opacity = 0.8;\n    this.grid.material.transparent = true;\n    this.grid.position.set(0, 0, 0);\n    this.grid.rotateX(Math.PI / 2);\n    if (!this.viewer.overlays.hasScene(\"grid\")) {\n      this.viewer.overlays.addScene(\"grid\");\n    }\n    this.viewer.overlays.addMesh(this.grid, \"grid\");\n    return true;\n  }\n\n  unload() {\n    console.log(\"Docking Panel has been unloaded !\");\n    if (this.viewer.toolbar !== null)\n      this.viewer.toolbar.removeControl(this.subToolbar);\n    if (this.panel !== null) this.panel.setVisible(false);\n    if (this._group) {\n      this._group.removeControl(this._button);\n      if (this._group.getNumberOfControls() === 0) {\n        this.viewer.toolbar.removeControl(this._group);\n      }\n    }\n    return true;\n  }\n\n  onToolbarCreated() {\n    this._group = this.viewer.toolbar.getControl(\"BeeInventorToolbar\");\n    if (!this._group) {\n      this._group = new Autodesk.Viewing.UI.ControlGroup(\"BeeInventorToolbar\");\n      this.viewer.toolbar.addControl(this._group);\n    }\n    this._button = new Autodesk.Viewing.UI.Button(\"Docking Panel\");\n    this._button.onClick = () => {\n      if (this.panel === null) {\n        this.panel = new CustomPanel(\n          this.viewer,\n          this.viewer.container,\n          \"beeInventor\",\n          \"My Custom Extension\"\n        );\n      }\n      // const panel = new CustomPanel();\n      // console.log(panel.map);\n      this.panel.setVisible(!this.panel.isVisible());\n    };\n    this._button.setToolTip(\"Docking Panel\");\n    this._button.addClass(\"dockingPanel\");\n    this._group.addControl(this._button);\n  }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension(\n  \"BeeInventor\",\n  BeeInventor\n);\n\nclass CustomPanel extends Autodesk.Viewing.UI.DockingPanel {\n  constructor(viewer, container, id, title, options) {\n    super(container, id, title, options);\n    this.viewer = viewer;\n    this.options = options;\n    this.container.classList.add(\"docking-panel-container-solid-color-a\");\n    this.container.style.top = \"10px\";\n    this.container.style.left = \"10px\";\n    this.container.style.width = \"500px\";\n    this.container.style.padding = \"10px\";\n    this.container.style.height = \"700px\";\n    this.container.style.resize = \"auto\";\n\n    this.sceneBuilder = null;\n    this.modelBuilder = null;\n    this.input = null;\n    this.inputValueDbId = null;\n    this.inputPosX = null;\n    this.inputPosY = null;\n    this.inputPosZ = null;\n    this.newGeo = null;\n    this.tagId = null;\n\n    // Initial Value\n    this.centerLat = 25.069771049083982;\n    this.centerLong = 121.52045303099948;\n    this.angle = 135;\n    this.deviceX = 4;\n    this.deviceY = -5;\n    this.BUILDING_CORNER_LOCATION = [\n      [-4, 5],\n      [-4, -5],\n      [4, -5],\n      [4, 5],\n    ];\n\n    this.iconMapbox = [\n      {\n        url: `${CDN_DOMAIN}/assets/images/png/img_dasloop_pin_online.png`,\n        id: \"worker\",\n        longLat: [121.52045833593478, 25.069785141828287],\n      },\n      {\n        url: `${CDN_DOMAIN}/assets/images/png/img_gps_plant_pin_online.png`,\n        id: \"excavator\",\n        longLat: [121.5203549994178, 25.069866644921674],\n      },\n    ];\n\n    this.positionRestrictedArea_X = -10;\n    this.positionRestrictedArea_Y = 5;\n    this.restricAreaSize_X = 1;\n    this.restricAreaSize_Y = 1;\n    this.restricAreaSize_Z = 1;\n    this.positionExcavator_X = 10;\n    this.positionExcavator_Y = 5;\n    this.valueX = null;\n    this.valueY = null;\n    this.valueZ = null;\n    this.humanModel1 = null;\n    this.excavator1 = null;\n    this.positionValue = null;\n    this.positionUWB = null;\n    this.datasAPI = null;\n    this.infoDegree = null;\n    this.infoDistance = null;\n    this.infoWorkerPosition = null;\n\n    // modelBuilder for custom Autodesk Forge\n    this.viewer\n      .loadExtension(\"Autodesk.Viewing.SceneBuilder\")\n      .then((builder) => {\n        this.sceneBuilder = builder;\n        return this.sceneBuilder.addNewModel({\n          modelNameOverride: \"Beacon\",\n          conserveMemory: false,\n        });\n      })\n      .then((builder) => {\n        this.modelBuilder = builder;\n        this.loadWorker(this.modelBuilder);\n        console.log(\"modelBuilder Created.\");\n      });\n\n    this.newModel = new Model(this.viewer, this.options);\n\n    // mapbox\n    this.containerMapbox = document.createElement(\"div\");\n    this.containerMapbox.setAttribute(\"id\", \"map\");\n    this.container.append(this.containerMapbox);\n    mapboxgl.accessToken =\n      \"pk.eyJ1IjoiYmVlaW52ZW50b3IiLCJhIjoiY2p1anFjbTY0MW9hMDRlcDRzMW9tcHJ1OSJ9.9WIfYAKd10XIdwWpB9EZFQ\";\n    this.map = new mapboxgl.Map({\n      container: \"map\",\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [this.centerLong, this.centerLat],\n    });\n    this.map.zoomTo(19.5);\n\n    // Features\n    this.loadGLTFModel();\n    // this.getDataUWB();\n    this.setNewWorker();\n    this.setNewRestrictedArea();\n    this.setNewBeacon();\n    this.setNewPlant();\n    this.setZoomToModel();\n    this.createInput();\n    this.setUpForm();\n    this.setVisibility();\n    this.setMapbox();\n    this.setDrawLine();\n    this.setDasloop();\n    this.lookAtMe();\n    this.setInfoDetails();\n  }\n\n  getDataUWB() {\n    setInterval(() => {\n      fetch(\"http://localhost:8080/mqtt/mockdata\")\n        .then((res) => res.json())\n        .then((res) => {\n          this.workerPosition(res);\n          this.tagId = res.tagId;\n        })\n        .catch((err) => console.log(err));\n    }, 2000);\n  }\n  calculateUWBPosition(d, directionDegree, degreeAOA, deviceX, deviceY) {\n    const r = d / 100;\n    const radian = ((-degreeAOA + directionDegree) * Math.PI) / 180;\n    let newX = r * Math.cos(radian);\n    let newY = r * Math.sin(radian);\n    newX += deviceX;\n    newY += deviceY;\n    return [newX, newY];\n  }\n\n  // initial load\n  loadWorker(modelBuilder) {\n    if (modelBuilder) {\n      this.newModel.addNewWorker(\n        modelBuilder,\n        parseInt(4210000000000195),\n        0,\n        0\n      );\n      this.newModel.addBeacon(\n        modelBuilder,\n        parseInt(1),\n        this.deviceX,\n        this.deviceY\n      );\n\n      this.newModel.addRestrictedArea(\n        modelBuilder,\n        parseInt(776),\n        this.positionRestrictedArea_X,\n        this.positionRestrictedArea_Y\n      );\n      this.newModel.addExcavator(\n        modelBuilder,\n        parseInt(1234),\n        this.positionExcavator_X,\n        this.positionRestrictedArea_Y\n      );\n    }\n  }\n\n  async loadGLTFModel() {\n    await this.viewer.loadExtension(\"Autodesk.glTF\");\n\n    await this.viewer.loadModel(\n      \"/assets/models/excavator8.gltf\",\n      {},\n      (model) => {\n        console.log(model);\n        this.excavator1 = model;\n      }\n    );\n  }\n\n  workerPosition(datas) {\n    if (datas) {\n      const position = this.calculateUWBPosition(\n        datas.distance,\n        this.angle,\n        datas.degree,\n        this.deviceX,\n        this.deviceY\n      );\n\n      // mapbox\n      const positionIndoor = this.calculateLatLong(\n        this.centerLat,\n        this.centerLong,\n        position[0],\n        position[1]\n      );\n      // mapbox dasloop\n      this.updateDasloopPosition(positionIndoor);\n\n      const tr = this.excavator1.getPlacementTransform();\n      console.log(tr.elements[12]);\n      console.log(tr.elements[13]);\n      console.log(tr.elements[14]);\n\n      // const excavator = this.newModel.objects[1234];\n\n      // const initialPosition = new THREE.Vector3();\n      // const positionOfExcavator = initialPosition.setFromMatrixPosition(\n      //   excavator.matrixWorld\n      // );\n      const finalPosition = this.calculateLatLong(\n        this.centerLat,\n        this.centerLong,\n        tr.elements[12],\n        tr.elements[13]\n      );\n      this.updateExcavatorPosition(finalPosition);\n\n      this.setValueDetails(\n        datas.degree,\n        datas.distance,\n        position,\n        positionIndoor[0],\n        positionIndoor[1]\n      );\n\n      this.newModel.changePositionSpecific(\n        this.modelBuilder,\n        datas.tagId,\n        position[0],\n        position[1]\n      );\n\n      // if (this.humanModel1) {\n      //   this.humanModel1.setPlacementTransform(\n      //     new THREE.Matrix4().setPosition({\n      //       x: position[0],\n      //       y: position[1],\n      //       z: 0,\n      //     })\n      //   );\n      // }\n    }\n  }\n\n  multiplyMatrix = (a, b) => {\n    const aNumRows = a.length;\n    const aNumCols = a[0].length;\n    const bNumCols = b[0].length;\n    const m = new Array(aNumRows);\n    for (let r = 0; r < aNumRows; r += 1) {\n      m[r] = new Array(bNumCols);\n      for (let c = 0; c < bNumCols; c += 1) {\n        m[r][c] = 0;\n        for (let i = 0; i < aNumCols; i += 1) {\n          m[r][c] += a[r][i] * b[i][c];\n        }\n      }\n    }\n    return m;\n  };\n  getRotatedPosition = (\n    x,\n    z,\n    boxCenterPositionX,\n    boxCenterPositionZ,\n    angle\n  ) => {\n    let coordinates = [x, z, [1, 1, 1, 1]];\n    const translateToOrigin = [\n      [1, 0, -boxCenterPositionX],\n      [0, 1, -boxCenterPositionZ],\n      [0, 0, 1],\n    ];\n    const radians = angle * (Math.PI / 180);\n    const rotate = [\n      [Math.cos(radians), -Math.sin(radians), 0],\n      [Math.sin(radians), Math.cos(radians), 0],\n      [0, 0, 1],\n    ];\n    const translateToOriginalPos = [\n      [1, 0, boxCenterPositionX],\n      [0, 1, boxCenterPositionZ],\n      [0, 0, 1],\n    ];\n    const toOrigin = this.multiplyMatrix(translateToOriginalPos, rotate);\n    const allTransform = this.multiplyMatrix(toOrigin, translateToOrigin);\n    coordinates = this.multiplyMatrix(allTransform, coordinates);\n    const xCoordinates = coordinates[0];\n    const yCoordinates = coordinates[1];\n    return [xCoordinates, yCoordinates];\n  };\n\n  getBoxPositionEveryCorner(\n    centerLat,\n    centerLong,\n    rest_area_X,\n    rest_area_Y,\n    rest_area_size_X,\n    rest_area_size_Y,\n    angle\n  ) {\n    let newCoordinatesEveryCorner = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n\n    const boxCenterX = rest_area_X;\n    const boxCenterZ = rest_area_Y;\n    const sizeX = rest_area_size_X * 2;\n    const sizeZ = rest_area_size_Y * 2;\n\n    // get position every corner (for rectangle)\n    const pointsX = [\n      boxCenterX - sizeX / 2,\n      boxCenterX - sizeX / 2,\n      boxCenterX + sizeX / 2,\n      boxCenterX + sizeX / 2,\n    ];\n    const pointsZ = [\n      boxCenterZ + sizeZ / 2,\n      boxCenterZ - sizeZ / 2,\n      boxCenterZ - sizeZ / 2,\n      boxCenterZ + sizeZ / 2,\n    ];\n    const positionEveryCorner = this.getRotatedPosition(\n      pointsX,\n      pointsZ,\n      boxCenterX,\n      boxCenterZ,\n      angle\n    );\n\n    newCoordinatesEveryCorner = this.toLatitudeLongitude(\n      centerLat,\n      centerLong,\n      positionEveryCorner\n    );\n\n    return newCoordinatesEveryCorner;\n  }\n\n  setNewWorker() {\n    let buttonCreate = document.createElement(\"div\");\n    buttonCreate.innerText = \"New Create Model\";\n    buttonCreate.classList.add(\"button-bee\");\n    buttonCreate.addEventListener(\"click\", async () => {\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.addNewWorker(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId)\n        );\n      } else {\n        alert(\"Please input a number !\");\n        return false;\n      }\n    });\n    this.container.append(buttonCreate);\n  }\n\n  setNewRestrictedArea() {\n    let buttonCreate = document.createElement(\"div\");\n    buttonCreate.innerText = \"New Restricted Area\";\n    buttonCreate.classList.add(\"button-bee\");\n    buttonCreate.addEventListener(\"click\", async () => {\n      const x = Math.floor(Math.random() * 100);\n      const y = Math.floor(Math.random() * 100);\n      // const x = -10;\n      // const y = 0;\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.addRestrictedArea(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId),\n          x,\n          y\n        );\n      } else {\n        alert(\"Please input a number of dbId!\");\n        return false;\n      }\n    });\n    this.container.append(buttonCreate);\n  }\n\n  setNewBeacon() {\n    let buttonCreate = document.createElement(\"div\");\n    buttonCreate.innerText = \"New Beacon\";\n    buttonCreate.classList.add(\"button-bee\");\n    buttonCreate.addEventListener(\"click\", async () => {\n      const x = Math.floor(Math.random() * 100);\n      const y = Math.floor(Math.random() * 100);\n      // const x = -20;\n      // const y = 0;\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.addBeacon(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId),\n          x,\n          y\n        );\n      } else {\n        alert(\"Please input a number of dbId!\");\n        return false;\n      }\n    });\n    this.container.append(buttonCreate);\n  }\n\n  setNewPlant() {\n    let buttonCreate = document.createElement(\"div\");\n    buttonCreate.innerText = \"New Plant\";\n    buttonCreate.classList.add(\"button-bee\");\n    buttonCreate.addEventListener(\"click\", async () => {\n      const x = Math.floor(Math.random() * 100);\n      const y = Math.floor(Math.random() * 100);\n      // const x = -30;\n      // const y = 0;\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.addExcavator(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId),\n          x,\n          y\n        );\n      } else {\n        alert(\"Please input a number of dbId!\");\n        return false;\n      }\n    });\n    this.container.append(buttonCreate);\n  }\n\n  setZoomToModel() {\n    let buttonZoom = document.createElement(\"div\");\n    buttonZoom.innerText = \"Create Zoom To\";\n    buttonZoom.classList.add(\"button-bee\");\n    buttonZoom.addEventListener(\"click\", () => {\n      if (\n        !isNaN(this.inputValueDbId) &&\n        this.inputValueDbId !== \"\" &&\n        this.inputValueDbId !== null\n      ) {\n        this.newModel.setFlyTo(\n          this.modelBuilder,\n          parseInt(this.inputValueDbId)\n        );\n      } else {\n        alert(\"Please input a number of dbId\");\n      }\n    });\n    this.container.append(buttonZoom);\n  }\n\n  createInput() {\n    this.input = document.createElement(\"input\");\n    this.input.setAttribute(\"value\", 1234);\n    this.input.addEventListener(\"input\", (e) => {\n      this.inputValueDbId = e.target.value;\n    });\n    this.container.append(this.input);\n  }\n\n  setVisibility() {\n    let buttonVisibility = document.createElement(\"div\");\n    buttonVisibility.innerText = \"Visibility\";\n    buttonVisibility.classList.add(\"button-bee\");\n    buttonVisibility.addEventListener(\"click\", async () => {\n      this.enabled = !this.enabled;\n      if (this.enabled) {\n        const instanceTree = this.viewer.model.getData().instanceTree;\n        const rootId = instanceTree.getRootId();\n        this.viewer.hide(rootId);\n      } else {\n        const instanceTree = this.viewer.model.getData().instanceTree;\n        const rootId = instanceTree.getRootId();\n        this.viewer.show(rootId);\n      }\n    });\n    this.container.append(buttonVisibility);\n  }\n\n  setUpForm() {\n    const form = document.createElement(\"form\");\n    form.setAttribute(\"id\", \"myform\");\n    const inputPosX = document.createElement(\"input\");\n    const inputPosY = document.createElement(\"input\");\n    const inputPosZ = document.createElement(\"input\");\n    inputPosX.setAttribute(\"name\", \"x\");\n    inputPosY.setAttribute(\"name\", \"y\");\n    inputPosZ.setAttribute(\"name\", \"z\");\n    const submit = document.createElement(\"input\");\n    submit.setAttribute(\"type\", \"submit\");\n    submit.innerText = \"submit_position\";\n    form.append(inputPosX, inputPosY, inputPosZ, submit);\n    form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      this.valueX = parseInt(form.elements.namedItem(\"x\").value);\n      this.valueY = parseInt(form.elements.namedItem(\"y\").value);\n      this.valueZ = parseInt(form.elements.namedItem(\"z\").value);\n\n      if (this.inputValueDbId) {\n        this.newModel.changePositionSpecific(\n          this.modelBuilder,\n          this.inputValueDbId,\n          this.valueX,\n          this.valueY,\n          this.valueZ\n        );\n      }\n    });\n    this.container.append(form);\n  }\n\n  setMapbox() {\n    const latshowvalue = document.createElement(\"input\");\n    const longshowvalue = document.createElement(\"input\");\n    latshowvalue.setAttribute(\"placeholder\", \"Latitude\");\n    longshowvalue.setAttribute(\"placeholder\", \"Longitude\");\n    const containerLatLong = document.createElement(\"div\");\n    containerLatLong.setAttribute(\"class\", \"containerLatLong\");\n    const positionX = document.createElement(\"input\");\n    const positionY = document.createElement(\"input\");\n    const positionZ = document.createElement(\"input\");\n    positionX.setAttribute(\"placeholder\", \"x\");\n    positionY.setAttribute(\"placeholder\", \"y\");\n    positionZ.setAttribute(\"placeholder\", \"z\");\n    containerLatLong.append(\n      latshowvalue,\n      longshowvalue,\n      positionX,\n      positionY,\n      positionZ\n    );\n\n    this.container.append(containerLatLong);\n\n    this.map.on(\"click\", (e) => {\n      const longitudeByClick = e.lngLat.lng;\n      const latitudeByClick = e.lngLat.lat;\n\n      latshowvalue.value = latitudeByClick;\n      longshowvalue.value = longitudeByClick;\n\n      const pos = this.geographicToCartesian(\n        this.centerLat,\n        this.centerLong,\n        latitudeByClick,\n        longitudeByClick\n      );\n      positionX.value = pos.x;\n      positionY.value = pos.y;\n\n      if (this.excavator1) {\n        this.excavator1.setPlacementTransform(\n          new THREE.Matrix4().setPosition({\n            x: pos.x,\n            y: pos.y,\n            z: 0,\n          })\n        );\n      }\n\n      // this.newModel.changePositionSpecific(\n      //   this.modelBuilder,\n      //   parseInt(1234),\n      //   pos.x,\n      //   pos.y\n      // );\n    });\n  }\n  toLatitudeLongitude(centerLat, centerLong, positionEveryCorner) {\n    const newCoordinatesAfterRotate = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n\n    for (let i = 0; i < positionEveryCorner[0].length; i += 1) {\n      newCoordinatesAfterRotate[i] = this.calculateLatLong(\n        centerLat,\n        centerLong,\n        positionEveryCorner[0][i],\n        positionEveryCorner[1][i]\n      );\n    }\n    return newCoordinatesAfterRotate;\n  }\n\n  calculateLatLong = (lat, long, x, y) => {\n    const rEarth = 6378;\n    const pi = Math.PI;\n    const xPos = x / 1000;\n    const yPos = y / 1000;\n\n    const newLat = lat + (yPos / rEarth) * (180 / pi);\n    const newLong =\n      long + ((xPos / rEarth) * (180 / pi)) / Math.cos((lat * pi) / 180);\n    return [newLong, newLat];\n  };\n\n  setCoordinateBuilding = () => {\n    const newCoordinatesAfterRotate = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n    for (let i = 0; i < this.BUILDING_CORNER_LOCATION.length; i += 1) {\n      newCoordinatesAfterRotate[i] = this.calculateLatLong(\n        this.centerLat,\n        this.centerLong,\n        this.BUILDING_CORNER_LOCATION[i][0],\n        this.BUILDING_CORNER_LOCATION[i][1]\n      );\n    }\n\n    return newCoordinatesAfterRotate;\n  };\n\n  setInfoDetails() {\n    const info = document.createElement(\"div\");\n    this.infoDegree = document.createElement(\"input\");\n    this.infoDistance = document.createElement(\"input\");\n    this.infoWorkerPosition = document.createElement(\"input\");\n    this.long = document.createElement(\"input\");\n    this.lat = document.createElement(\"input\");\n    info.append(\n      this.infoDegree,\n      this.infoDistance,\n      this.infoWorkerPosition,\n      this.long,\n      this.lat\n    );\n    this.container.append(info);\n  }\n\n  setValueDetails(degree, distance, workerposition, long, lat) {\n    this.infoDegree.value = parseFloat(degree).toFixed(2);\n    this.infoDistance.value = distance;\n    this.infoWorkerPosition.value = `(${parseFloat(workerposition[0]).toFixed(\n      2\n    )}, ${parseFloat(workerposition[1]).toFixed(2)})`;\n    this.long.value = long;\n    this.lat.value = lat;\n  }\n\n  setDasloop() {\n    this.map.on(\"load\", () => {\n      // Load an image from an external URL.\n      Promise.all(\n        this.iconMapbox.map(\n          (img) =>\n            new Promise((resolve, reject) => {\n              this.map.loadImage(img.url, (error, res) => {\n                if (error) {\n                  console.log(`Error with ${img.id}`);\n                  console.error(error);\n                  reject(error);\n                } else {\n                  resolve([img, res]);\n                }\n              });\n            })\n        )\n      ).then((icons) => {\n        icons.forEach((icon_data) => {\n          const icon = icon_data[0];\n          const data = icon_data[1];\n\n          if (data) this.map.addImage(icon.id, data);\n\n          this.map.addSource(icon.id, {\n            type: \"geojson\",\n            data: {\n              type: \"FeatureCollection\",\n              features: [\n                {\n                  type: \"Feature\",\n                  geometry: {\n                    type: \"Point\",\n                    coordinates: [icon.longLat[0], icon.longLat[1]],\n                  },\n                  properties: {},\n                },\n              ],\n            },\n          });\n\n          // Add a layer to use the image to represent the data.\n          this.map.addLayer({\n            id: icon.id,\n            type: \"symbol\",\n            source: icon.id, // reference the data source\n            layout: {\n              \"icon-image\": icon.id, // reference the image\n              \"icon-size\": 0.1,\n              \"icon-offset\": [0, -150],\n              \"icon-allow-overlap\": true,\n            },\n          });\n        });\n      });\n    });\n  }\n\n  updateDasloopPosition(dasloopLatLong) {\n    if (dasloopLatLong) {\n      const data = {\n        type: \"FeatureCollection\",\n        features: [\n          {\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: [dasloopLatLong[0], dasloopLatLong[1]],\n            },\n            properties: {},\n          },\n        ],\n      };\n\n      const source = this.map.getSource(\"worker\");\n      if (source) {\n        source.setData(data);\n      }\n    }\n  }\n\n  updateExcavatorPosition(excavatorLatLong) {\n    if (excavatorLatLong) {\n      const excavatorData = {\n        type: \"FeatureCollection\",\n        features: [\n          {\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: [excavatorLatLong[0], excavatorLatLong[1]],\n            },\n            properties: {},\n          },\n        ],\n      };\n\n      const sourceExcavator = this.map.getSource(\"excavator\");\n      if (sourceExcavator) {\n        sourceExcavator.setData(excavatorData);\n      }\n    }\n  }\n\n  // draw line\n  setDrawLine() {\n    this.map.on(\"load\", () => {\n      const newCoordinates = this.setCoordinateBuilding();\n      this.map.addSource(\"route\", {\n        type: \"geojson\",\n        data: {\n          type: \"Feature\",\n          properties: {},\n          geometry: {\n            type: \"LineString\",\n            coordinates: [\n              ...newCoordinates.map((coord) => {\n                return coord;\n              }),\n              newCoordinates[0],\n            ],\n          },\n        },\n      });\n      this.map.addLayer({\n        id: \"route\",\n        type: \"line\",\n        source: \"route\",\n        layout: {\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\",\n        },\n        paint: {\n          \"line-color\": \"#ff0000\",\n          \"line-width\": 4,\n        },\n      });\n\n      const restrictedAreaLine = this.getBoxPositionEveryCorner(\n        this.centerLat,\n        this.centerLong,\n        this.positionRestrictedArea_X,\n        this.positionRestrictedArea_Y,\n        this.restricAreaSize_X,\n        this.restricAreaSize_Y,\n        0\n      );\n      this.map.addSource(\"route2\", {\n        type: \"geojson\",\n        data: {\n          type: \"Feature\",\n          properties: {},\n          geometry: {\n            type: \"LineString\",\n            coordinates: [\n              ...restrictedAreaLine.map((coord) => {\n                return coord;\n              }),\n              restrictedAreaLine[0],\n            ],\n          },\n        },\n      });\n      this.map.addLayer({\n        id: \"route2\",\n        type: \"line\",\n        source: \"route2\",\n        layout: {\n          \"line-join\": \"round\",\n          \"line-cap\": \"round\",\n        },\n        paint: {\n          \"line-color\": \"#ff0000\",\n          \"line-width\": 4,\n        },\n      });\n    });\n  }\n\n  lookAtMe() {\n    let buttonLook = document.createElement(\"div\");\n    buttonLook.classList.add(\"button-bee\");\n    buttonLook.innerText = \"Change Scale\";\n    buttonLook.addEventListener(\"click\", () => {\n      this.newModel.restrictedAreaScale(\n        parseInt(776),\n        this.modelBuilder,\n        this.restricAreaSize_X,\n        this.restricAreaSize_Y\n      );\n    });\n    this.container.append(buttonLook);\n  }\n\n  toForgeCoordinate({ x, y }) {\n    return {\n      x: x,\n      y: y,\n    };\n  }\n\n  geographicToCartesian = (\n    latitudeCenter,\n    longitudeCenter,\n    latitude,\n    longitude\n  ) => {\n    let distanceX = distance(\n      latitudeCenter,\n      longitudeCenter,\n      latitudeCenter,\n      longitude\n    );\n    let distanceY = distance(\n      latitudeCenter,\n      longitudeCenter,\n      latitude,\n      longitudeCenter\n    );\n\n    if (longitudeCenter * longitude > 0) {\n      if (longitudeCenter > longitude) {\n        distanceX *= -1;\n      }\n    } else if (\n      longitudeCenter < 0 &&\n      longitude > 0 &&\n      Math.abs(longitudeCenter - longitude) > 180\n    ) {\n      distanceX *= -1;\n    }\n\n    if (latitudeCenter > latitude) {\n      distanceY *= -1;\n    }\n    return this.toForgeCoordinate({ x: distanceX, y: distanceY });\n  };\n\n  distance = (lat1, long1, lat2, long2) => {\n    const R = 6371e3;\n    const φ1 = (lat1 * Math.PI) / 180;\n    const φ2 = (lat2 * Math.PI) / 180;\n    const Δφ = ((lat2 - lat1) * Math.PI) / 180;\n    const Δλ = ((long2 - long1) * Math.PI) / 180;\n    const a =\n      Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n      Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c;\n    return d;\n  };\n}\n\nclass Model {\n  constructor(viewer, options) {\n    this.viewer = viewer;\n    this.options = options;\n    this.position = null;\n    this.workerId = null;\n    this.model = null;\n    this.humanModel = null;\n    this.restrictedArea = null;\n    this.beacon = null;\n    this.excavator = null;\n    this.objects = {};\n  }\n\n  addWorker(modelBuilder, dbId, x = 0, y = 0, z = 3) {\n    let modelGeometry = new THREE.Geometry();\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const texture = THREE.ImageUtils.loadTexture(\n      `${CDN_DOMAIN}/assets/images/png/img_gps_dasloop_online.png`\n    );\n    texture.minFilter = THREE.LinearFilter;\n    const workerMaterial = new THREE.MeshBasicMaterial({\n      map: texture,\n      side: THREE.DoubleSide,\n    });\n    const planeGeometry = new THREE.PlaneGeometry(1, 1);\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n    textGeometry.computeBoundingBox();\n\n    const workerIdMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    const workerMesh = new THREE.Mesh(planeGeometry, workerMaterial);\n\n    // Setup Human Position\n    workerIdMesh.matrix.setPosition(new THREE.Vector3(-1.5, 0.7, 0));\n    workerIdMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n\n    // Merging\n    modelGeometry.merge(workerMesh.geometry, workerMesh.matrix);\n    modelGeometry.merge(workerIdMesh.geometry, workerIdMesh.matrix);\n    modelGeometry.computeVertexNormals();\n    const workerBufferGeometry = new THREE.BufferGeometry().fromGeometry(\n      modelGeometry\n    );\n    this.humanModel = new THREE.Mesh(workerBufferGeometry, workerMaterial);\n    this.humanModel.matrix.setPosition(new THREE.Vector3(x, y, z));\n\n    // Add to object userData\n    this.humanModel.userData.id = dbId;\n    this.objects[this.humanModel.userData.id] = this.humanModel;\n    this.humanModel.dbId = dbId;\n    modelBuilder.addMesh(this.humanModel);\n  }\n\n  addNewWorker(modelBuilder, dbId, x = 0, y = 0, z = 1) {\n    let modelGeometry = new THREE.Geometry();\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const head = new THREE.SphereGeometry(0.4, 32, 16);\n    const body = new THREE.SphereGeometry(0.3, 32, 16);\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n\n    const humanIdMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    humanIdMesh.matrix.setPosition(new THREE.Vector3(0, 0, 1.3));\n    humanIdMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    const headMesh = new THREE.Mesh(head, globalMaterial);\n    const bodyMesh = new THREE.Mesh(body, globalMaterial);\n\n    headMesh.matrix.setPosition(new THREE.Vector3(0, 0, 1));\n\n    headMesh.matrix.scale(new THREE.Vector3(0.5, 0.5, 0.5));\n    bodyMesh.matrix.scale(new THREE.Vector3(0.5, 0.5, 2.5));\n    modelGeometry.merge(headMesh.geometry, headMesh.matrix);\n    modelGeometry.merge(bodyMesh.geometry, bodyMesh.matrix);\n    modelGeometry.merge(humanIdMesh.geometry, humanIdMesh.matrix);\n    modelGeometry.computeVertexNormals();\n    const humanModel = new THREE.BufferGeometry().fromGeometry(modelGeometry);\n    this.humanModel = new THREE.Mesh(humanModel, globalMaterial);\n    this.humanModel.matrix.setPosition(new THREE.Vector3(x, y, z));\n    this.humanModel.userData.id = dbId;\n    this.objects[this.humanModel.userData.id] = this.humanModel;\n    this.humanModel.dbId = dbId;\n    modelBuilder.addMesh(this.humanModel);\n    this.model = this.modelBuilder;\n  }\n\n  addRestrictedArea(modelBuilder, dbId, x = 0, y = 0, z = 2) {\n    const box = new THREE.BoxGeometry(1, 1, 1);\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n\n    let restricted = new THREE.Geometry();\n    const boxMesh = new THREE.Mesh(box, globalMaterial);\n    const textMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    textMesh.matrix.setPosition(new THREE.Vector3(0, 0.5, 0));\n    textMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    boxMesh.matrix.scale(new THREE.Vector3(1, 1, 1));\n\n    restricted.merge(boxMesh.geometry, boxMesh.matrix);\n    restricted.merge(textMesh.geometry, textMesh.matrix);\n    restricted.computeVertexNormals();\n    const restrictedGeo = new THREE.BufferGeometry().fromGeometry(restricted);\n    this.restrictedArea = new THREE.Mesh(restrictedGeo, globalMaterial);\n\n    this.restrictedArea.matrix.setPosition(new THREE.Vector3(x, y, z));\n    // Add to object userData\n    this.restrictedArea.userData.id = dbId;\n    this.objects[this.restrictedArea.userData.id] = this.restrictedArea;\n    this.restrictedArea.dbId = dbId;\n    modelBuilder.addMesh(this.restrictedArea);\n  }\n\n  addExcavator(modelBuilder, dbId, x = 0, y = 0, z = 1) {\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: \"#ff9500\" });\n    const texture = THREE.ImageUtils.loadTexture(\n      `${CDN_DOMAIN}/assets/images/png/img_gps_plant_online-3.png`\n    );\n    texture.minFilter = THREE.LinearFilter;\n    const excavatorMaterial = new THREE.MeshBasicMaterial({\n      map: texture,\n      side: THREE.DoubleSide,\n    });\n    const boxGeometry = new THREE.BoxGeometry(1, 1, 1);\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n    textGeometry.computeBoundingBox();\n\n    const textMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    const excavatorMesh = new THREE.Mesh(boxGeometry, globalMaterial);\n    excavatorMesh.matrix.scale(new THREE.Vector3(2, 2, 1));\n    textMesh.matrix.setPosition(new THREE.Vector3(0, 1, 0));\n    textMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    let excavatorGeo = new THREE.Geometry();\n\n    excavatorGeo.merge(textMesh.geometry, textMesh.matrix);\n    excavatorGeo.merge(excavatorMesh.geometry, excavatorMesh.matrix);\n    excavatorGeo.computeVertexNormals();\n\n    const excavatorBuffer = new THREE.BufferGeometry().fromGeometry(\n      excavatorGeo\n    );\n    this.excavator = new THREE.Mesh(excavatorBuffer, excavatorMaterial);\n\n    this.excavator.matrix.setPosition(new THREE.Vector3(x, y, z));\n\n    // Add to object userData\n    this.excavator.userData.id = dbId;\n    this.objects[this.excavator.userData.id] = this.excavator;\n\n    this.excavator.dbId = dbId;\n    modelBuilder.addMesh(this.excavator);\n  }\n\n  addBeacon(modelBuilder, dbId, x = 0, y = 0, z = 1) {\n    const sphere = new THREE.SphereGeometry(0.3, 32, 16);\n    const globalMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const textGeometry = new THREE.TextGeometry(`${dbId}`, {\n      font: \"monaco\",\n      size: 1,\n      height: 0,\n      curveSegments: 3,\n    });\n    const textMesh = new THREE.Mesh(textGeometry, globalMaterial);\n    const beaconMesh = new THREE.Mesh(sphere, globalMaterial);\n    // Setup Human Position\n    textMesh.matrix.setPosition(new THREE.Vector3(0, 0.5, 0));\n    textMesh.matrix.scale(new THREE.Vector3(0.2, 0.2, 0.2));\n    let beaconGeo = new THREE.Geometry();\n    beaconGeo.merge(textMesh.geometry, textMesh.matrix);\n    beaconGeo.merge(beaconMesh.geometry, beaconMesh.matrix);\n    beaconGeo.computeVertexNormals();\n\n    const beaconBuffer = new THREE.BufferGeometry().fromGeometry(beaconGeo);\n    this.beacon = new THREE.Mesh(beaconBuffer, globalMaterial);\n    this.beacon.matrix.setPosition(new THREE.Vector3(x, y, z));\n\n    // Add to object userData\n    this.beacon.userData.id = dbId;\n    this.objects[this.beacon.userData.id] = this.beacon;\n\n    this.beacon.dbId = dbId;\n    modelBuilder.addMesh(this.beacon);\n  }\n\n  setFlyTo(modelBuilder, dbId) {\n    this.viewer.select([dbId], modelBuilder.model);\n    this.viewer.utilities.fitToView();\n  }\n\n  changePosition(modelBuilder, mesh, x, y, z) {\n    console.log(mesh);\n    mesh.matrix.setPosition(new THREE.Vector3(x, y, z));\n    modelBuilder.updateMesh(mesh);\n  }\n\n  changePositionSpecific(modelBuilder, dbId, x = 0, y = 0, z = 1) {\n    if (this.objects[dbId]) {\n      this.objects[dbId].matrix.setPosition(new THREE.Vector3(x, y, z));\n      modelBuilder.updateMesh(this.objects[dbId]);\n    } else {\n      console.log(\"there is no object on this scene !\");\n    }\n  }\n\n  restrictedAreaScale(dbId, modelBuilder, size_X, size_Y) {\n    if (this.objects[dbId]) {\n      this.objects[dbId].matrix.scale(new THREE.Vector3(size_X, size_Y, 1));\n      modelBuilder.updateMesh(this.objects[dbId]);\n      // const position = new THREE.Vector3();\n      // const scale = position.setFromMatrixScale(this.objects[dbId].matrixWorld);\n    } else {\n      console.log(\"there is no object on this scene !\");\n    }\n  }\n\n  lookAtMe(modelBuilder, dbId) {\n    // this.objects[dbId].lookAt(this.viewer.getCamera().clone().position);\n    // console.log(this.objects[dbId].matrix.makeRotationFromQuaternion());\n    console.log(modelBuilder);\n\n    this.objects[dbId].matrix.makeRotationFromQuaternion(\n      this.viewer.getCamera().clone().quaternion\n    );\n    modelBuilder.updateMesh(this.objects[dbId]);\n  }\n}\n"],"names":["distance","lat1","long1","lat2","long2","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","atan2","sqrt","BeeInventor","Autodesk","Viewing","Extension","viewer","options","_button","_group","panel","grid","console","log","this","THREE","GridHelper","material","opacity","transparent","position","set","rotateX","overlays","hasScene","addScene","addMesh","toolbar","removeControl","subToolbar","setVisible","getNumberOfControls","getControl","UI","ControlGroup","addControl","Button","onClick","CustomPanel","container","isVisible","setToolTip","addClass","theExtensionManager","registerExtension","DockingPanel","id","title","b","aNumRows","length","aNumCols","bNumCols","m","Array","r","c","i","x","z","boxCenterPositionX","boxCenterPositionZ","angle","coordinates","translateToOrigin","radians","rotate","translateToOriginalPos","toOrigin","multiplyMatrix","allTransform","lat","long","y","pi","newLat","newCoordinatesAfterRotate","BUILDING_CORNER_LOCATION","calculateLatLong","centerLat","centerLong","latitudeCenter","longitudeCenter","latitude","longitude","distanceX","distanceY","abs","toForgeCoordinate","classList","add","style","top","left","width","padding","height","resize","sceneBuilder","modelBuilder","input","inputValueDbId","inputPosX","inputPosY","inputPosZ","newGeo","tagId","deviceX","deviceY","iconMapbox","url","CDN_DOMAIN","longLat","positionRestrictedArea_X","positionRestrictedArea_Y","restricAreaSize_X","restricAreaSize_Y","restricAreaSize_Z","positionExcavator_X","positionExcavator_Y","valueX","valueY","valueZ","humanModel1","excavator1","positionValue","positionUWB","datasAPI","infoDegree","infoDistance","infoWorkerPosition","loadExtension","then","builder","addNewModel","modelNameOverride","conserveMemory","loadWorker","newModel","Model","containerMapbox","document","createElement","setAttribute","append","mapboxgl","accessToken","map","Map","center","zoomTo","loadGLTFModel","setNewWorker","setNewRestrictedArea","setNewBeacon","setNewPlant","setZoomToModel","createInput","setUpForm","setVisibility","setMapbox","setDrawLine","setDasloop","lookAtMe","setInfoDetails","setInterval","fetch","res","json","workerPosition","err","d","directionDegree","degreeAOA","radian","newX","newY","addNewWorker","parseInt","addBeacon","addRestrictedArea","addExcavator","loadModel","model","datas","calculateUWBPosition","degree","positionIndoor","updateDasloopPosition","tr","getPlacementTransform","elements","finalPosition","updateExcavatorPosition","setValueDetails","changePositionSpecific","rest_area_X","rest_area_Y","rest_area_size_X","rest_area_size_Y","boxCenterX","boxCenterZ","sizeX","sizeZ","pointsX","pointsZ","positionEveryCorner","getRotatedPosition","toLatitudeLongitude","buttonCreate","innerText","addEventListener","isNaN","alert","floor","random","buttonZoom","setFlyTo","e","target","value","buttonVisibility","enabled","instanceTree","getData","rootId","getRootId","hide","show","form","submit","preventDefault","namedItem","latshowvalue","longshowvalue","containerLatLong","positionX","positionY","positionZ","on","longitudeByClick","lngLat","lng","latitudeByClick","pos","geographicToCartesian","setPlacementTransform","Matrix4","setPosition","info","workerposition","parseFloat","toFixed","Promise","all","img","resolve","reject","loadImage","error","icons","forEach","icon_data","icon","data","addImage","addSource","type","features","geometry","properties","addLayer","source","layout","dasloopLatLong","getSource","setData","excavatorLatLong","excavatorData","sourceExcavator","newCoordinates","setCoordinateBuilding","coord","paint","restrictedAreaLine","getBoxPositionEveryCorner","buttonLook","restrictedAreaScale","workerId","humanModel","restrictedArea","beacon","excavator","objects","dbId","modelGeometry","Geometry","globalMaterial","MeshBasicMaterial","color","texture","ImageUtils","loadTexture","minFilter","LinearFilter","workerMaterial","side","DoubleSide","planeGeometry","PlaneGeometry","textGeometry","TextGeometry","font","size","curveSegments","computeBoundingBox","workerIdMesh","Mesh","workerMesh","matrix","Vector3","scale","merge","computeVertexNormals","workerBufferGeometry","BufferGeometry","fromGeometry","userData","head","SphereGeometry","body","humanIdMesh","headMesh","bodyMesh","box","BoxGeometry","restricted","boxMesh","textMesh","restrictedGeo","excavatorMaterial","boxGeometry","excavatorMesh","excavatorGeo","excavatorBuffer","sphere","beaconMesh","beaconGeo","beaconBuffer","select","utilities","fitToView","mesh","updateMesh","size_X","size_Y","makeRotationFromQuaternion","getCamera","clone","quaternion"],"sourceRoot":""}